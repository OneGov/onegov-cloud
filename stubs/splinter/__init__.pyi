from collections.abc import Sequence
from typing import Any, Literal, Protocol, Self

# NOTE: We don't stubtest these stubs, since we simplified them down a lot
#       from their actual implementation, to how it's actually used.

class Browser:
    driver_name: str
    def __init__(self, driver_name: str, *args: Any, **kwargs: Any) -> None: ...
    @property
    def title(self) -> str: ...
    @property
    def html(self) -> str: ...
    @property
    def url(self) -> str: ...
    def visit(self, url: str) -> None: ...
    def new_tab(self, url: str) -> None: ...
    def back(self) -> None: ...
    def forward(self) -> None: ...
    def reload(self) -> None: ...
    def get_alert(self) -> Any: ...
    def get_iframe(self, name: Any) -> Any: ...
    def execute_script(self, script: str, *args: str) -> Any: ...
    def evaluate_script(self, script: str, *args: str) -> Any: ...
    def find_by_css(self, css_selector: str) -> ElementList: ...
    def find_by_xpath(self, xpath: str) -> ElementList: ...
    def find_by_name(self, name: str) -> ElementList: ...
    def find_by_id(self, id_value: str) -> ElementList: ...
    def find_by_value(self, value: str) -> ElementList: ...
    def find_by_text(self, text: str) -> ElementList: ...
    def find_by_tag(self, tag: str) -> ElementList: ...
    def find_option_by_value(self, value: str) -> ElementList: ...
    def find_option_by_text(self, text: str) -> ElementList: ...
    def set_find_strategy(self, strategy: Literal['css', 'name', 'xpath']) -> Self: ...
    def find(self, locator: str) -> ElementList: ...
    def is_text_present(self, text: str, wait_time: float | None = None) -> bool: ...
    def type(self, name: str, value: str, slowly: bool = False) -> str: ...
    def fill(self, name: str, value: str) -> None: ...
    def fill_form(
        self,
        field_values: dict[str, str],
        form_id: str | None = None,
        name: str | None = None,
        ignore_missing: bool = False,
    ) -> None: ...
    def choose(self, name: str, value: str) -> None: ...
    def check(self, name: str) -> None: ...
    def uncheck(self, name: str) -> None: ...
    def select(self, name: str, value: str) -> None: ...
    def quit(self) -> None: ...
    def is_element_present_by_css(self, css_selector: str, wait_time: float | None = None) -> bool: ...
    def is_element_not_present_by_css(self, css_selector: str, wait_time: float | None = None) -> bool: ...
    def is_element_present_by_xpath(self, xpath: str, wait_time: float | None = None) -> bool: ...
    def is_element_not_present_by_xpath(self, xpath: str, wait_time: float | None = None) -> bool: ...
    def is_element_present_by_tag(self, tag: str, wait_time: float | None = None) -> bool: ...
    def is_element_not_present_by_tag(self, tag: str, wait_time: float | None = None) -> bool: ...
    def is_element_present_by_name(self, name: str, wait_time: float | None = None) -> bool: ...
    def is_element_not_present_by_name(self, name: str, wait_time: float | None = None) -> bool: ...
    def is_element_present_by_value(self, value: str, wait_time: float | None = None) -> bool: ...
    def is_element_not_present_by_value(self, value: str, wait_time: float | None = None) -> bool: ...
    def is_element_present_by_text(self, text: str, wait_time: float | None = None) -> bool: ...
    def is_element_not_present_by_text(self, text: str, wait_time: float | None = None) -> bool: ...
    def is_element_present_by_id(self, id: str, wait_time: float | None = None) -> bool: ...
    def is_element_not_present_by_id(self, id: str, wait_time: float | None = None) -> bool: ...
    def screenshot(
        self,
        name: str | None = None,
        suffix: str | None = None,
        full: bool = False,
        unique_file: bool = True,
    ) -> str: ...
    def html_snapshot(
        self,
        name: str = "",
        suffix: str = ".html",
        encoding: str = "utf-8",
        unique_file: bool = True,
    ) -> str: ...
    @property
    def cookies(self) -> CookieManagerAPI: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, exc_type: object, exc_value: object, traceback: object) -> None: ...

class CookieManagerAPI(Protocol):
    def add(self, cookie: dict[str, str], **kwargs: Any) -> None: ...
    def delete(self, *cookies: str) -> None: ...
    def delete_all(self) -> None: ...
    def all(self, verbose: bool = False) -> list[dict[str, str]]: ...
    def __contains__(self, key: str) -> bool: ...
    def __getitem__(self, item: str) -> str: ...

class ElementAPI(Protocol):
    @property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> None: ...
    @property
    def shadow_root(self) -> Self: ...
    @property
    def text(self) -> str: ...
    def click(self) -> None: ...
    def check(self) -> None: ...
    def uncheck(self) -> None: ...
    @property
    def checked(self) -> bool: ...
    @property
    def visible(self) -> bool: ...
    def is_visible(self, wait_time: float | None = None) -> bool: ...
    def is_not_visible(self, wait_time: float | None = None) -> bool: ...
    def find_by_css(self, css_selector: str) -> ElementList: ...
    def find_by_xpath(self, xpath: str) -> ElementList: ...
    def find_by_name(self, name: str) -> ElementList: ...
    def find_by_id(self, id_value: str) -> ElementList: ...
    def find_by_value(self, value: str) -> ElementList: ...
    def find_by_text(self, text: str) -> ElementList: ...
    def find_by_tag(self, tag: str) -> ElementList: ...
    def has_class(self, class_name: str) -> bool: ...
    def mouse_over(self) -> None: ...
    def mouse_out(self) -> None: ...
    def clear(self) -> None: ...
    def fill(self, value: str) -> None: ...
    def type(self, value: str, slowly: bool = False) -> str: ...
    def select(self, value: str, slowly: bool = False) -> None: ...
    def screenshot(
        self,
        name: str | None = None,
        suffix: str | None = None,
        full: bool = False,
        unique_file: bool = True,
    ) -> str: ...
    def __getitem__(self, attribute: str) -> Any: ...

class ElementList(ElementAPI, Sequence[ElementAPI]):
    @property
    def first(self) -> ElementAPI: ...
    @property
    def last(self) -> ElementAPI: ...
    def is_empty(self) -> bool: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> ElementAPI: ...  # type: ignore[override]
