from collections.abc import Iterator, Sequence
from typing import overload, Generic, TypeVar
from typing_extensions import Self

from sqlalchemy.orm import Query

_T = TypeVar('_T')


class QueryChain(Generic[_T]):
    queries: Sequence[Query[_T]]
    def __init__(self: QueryChain[_T], queries: Sequence[Query[_T]], limit: int | None = None, offset: int | None = None): ...
    def __iter__(self) -> Iterator[_T]: ...
    def limit(self, value: int) -> Self: ...
    def offset(self, value: int) -> Self: ...
    def count(self) -> int: ...
    @overload
    def __getitem__(self, key: slice) -> Self: ...
    @overload
    def __getitem__(self, key: int | None) -> _T: ...
