from collections.abc import Iterable, Sequence
from typing import Any, Final

from reportlab.lib.styles import PropertySet
from reportlab.pdfgen.canvas import Canvas
from reportlab.platypus import BaseDocTemplate, Flowable, PageBreak, Paragraph as _Paragraph, Spacer, Table
from reportlab.platypus.doctemplate import _PageCallback
from reportlab.platypus.tables import _TableCommand, TableStyle

PY2: Final[bool]
string_type = str

def register_fonts_from_paths(
    regular: str,
    italic: str | None = None,
    bold: str | None = None,
    bolditalic: str | None = None,
    font_name: str = "Reporting",
) -> None: ...

# NOTE: This is sometimes used as an empty Stylesheet, but also sometimes
#       as a PropertySet, so we treat it like Any
Empty = Any  # noqa: Y026

def sanitize(text: str) -> str: ...
def normalize(text: str | bytes) -> str: ...
def MarkupParagraph(txt: str | bytes, *args: Any, **kwargs: Any) -> _Paragraph: ...
def Paragraph(txt: str | bytes, *args: Any, **kwargs: Any) -> _Paragraph: ...

class BottomTable(Table): ...
class BottomSpacer(Spacer): ...
class RestartPageBreak(PageBreak): ...

class ReportingDocTemplate(BaseDocTemplate):
    PDFDocument: PDFDocument
    def page_index(self) -> tuple[int, int]: ...
    def page_index_string(self) -> str: ...

def dummy_stationery(c: Canvas, doc: BaseDocTemplate) -> None: ...

class PDFDocument:
    show_boundaries: bool
    doc: ReportingDocTemplate
    story: list[Flowable]
    font_name: str
    font_size: float

    # NOTE: Anything below will not always exist
    # NOTE: Since they use table style commands instead of TableStyle this
    #       will be annoying to type
    style: Any
    keeptogether_index: int
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def page_index_string(self, current_page: int, total_pages: int) -> str: ...
    def generate_style(self, font_name: str | None = None, font_size: float | None = None) -> None: ...
    def init_templates(self, page_fn: _PageCallback, page_fn_later: _PageCallback | None = None) -> None: ...
    def init_report(self, page_fn: _PageCallback = ..., page_fn_later: _PageCallback | None = None) -> None: ...
    def init_confidential_report(self, page_fn: _PageCallback = ..., page_fn_later: _PageCallback | None = None) -> None: ...
    def init_letter(
        self,
        page_fn: _PageCallback = ...,
        page_fn_later: _PageCallback | None = None,
        address_y: float | None = None,
        address_x: float | None = None,
    ) -> None: ...
    def watermark(self, watermark: str | None = None) -> None: ...
    def restart(self) -> None: ...
    def p(self, text: str, style: PropertySet | None = None) -> None: ...
    def h1(self, text: str, style: PropertySet | None = None) -> None: ...
    def h2(self, text: str, style: PropertySet | None = None) -> None: ...
    def h3(self, text: str, style: PropertySet | None = None) -> None: ...
    def small(self, text: str, style: PropertySet | None = None) -> None: ...
    def smaller(self, text: str, style: PropertySet | None = None) -> None: ...
    def p_markup(self, text: str, style: PropertySet | None = None) -> None: ...
    def ul(self, items: Iterable[str]) -> None: ...
    def spacer(self, height: float = ...) -> None: ...
    def table(
        self,
        data: Sequence[list[Any] | tuple[Any, ...]],
        columns: Sequence[float | str | None] | float | str | None,
        style: TableStyle | Iterable[_TableCommand] | None = None
    ) -> None: ...
    def hr(self) -> None: ...
    def hr_mini(self) -> None: ...
    def mini_html(self, html: str) -> None: ...
    def pagebreak(self) -> None: ...
    def bottom_table(
        self,
        data: Sequence[list[Any] | tuple[Any, ...]],
        columns: Sequence[float | str | None] | float | str | None,
        style: TableStyle | Iterable[_TableCommand] | None = None
    ) -> None: ...
    def append(self, data: Flowable) -> None: ...
    def generate(self) -> None: ...
    def confidential(self, canvas: Canvas) -> None: ...
    def draw_watermark(self, canvas: Canvas) -> None: ...
    def draw_svg(
        self,
        canvas: Canvas,
        path: str,
        xpos: float = 0,
        ypos: float = 0,
        xsize: float | None = None,
        ysize: float | None = None
    ) -> None: ...
    def next_frame(self) -> None: ...
    def start_keeptogether(self) -> None: ...
    def end_keeptogether(self) -> None: ...
    def address_head(self, text: str) -> None: ...
    def address(self, obj: object, prefix: str = "") -> None: ...
