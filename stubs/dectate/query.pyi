from collections.abc import Iterable, Iterator, Sequence
from typing import Any, Generic, TypeVar, overload

from dectate.app import App
from dectate.config import Action, Composite, Configurable

_ActionT = TypeVar('_ActionT', bound=Action)

class Callable(Generic[_ActionT]):
    def __call__(self, app_class: type[App]) -> Iterator[Any]: ...

class Base(Callable[_ActionT]):
    def filter(self, **kw: object) -> Filter[_ActionT]: ...
    def attrs(self, *names: str) -> Attrs: ...
    def obj(self) -> Obj: ...

class Query(Base[_ActionT]):
    action_classes: tuple[type[_ActionT | Composite] | str]
    @overload
    def __init__(self: Query[_ActionT], *action_classes: type[_ActionT]) -> None: ...
    @overload
    def __init__(self: Query[Any], *action_classes: type[Action | Composite] | str) -> None: ...
    def execute(self, configurable: Configurable) -> Iterator[tuple[Action, Any]]: ...
    def __call__(self, app_class: type[App]) -> Iterator[tuple[_ActionT, Any]]: ...

def expand_action_classes(action_classes: Iterable[type[Action | Composite]]) -> set[type[Action]]: ...
def query_action_classes(configurable: Configurable, action_classes: Iterable[type[Action | Composite]]) -> Iterator[tuple[Action, Any]]: ...
def get_action_class(app_class: type[App], directive_name: str) -> type[Action | Composite]: ...
def compare_equality(compared: object, value: object) -> bool: ...

class Filter(Base[_ActionT]):
    query: Query[_ActionT]
    kw: dict[str, Any]
    def __init__(self, query: Query[_ActionT], **kw: Any) -> None: ...
    def execute(self, configurable: Configurable) -> Iterator[tuple[_ActionT, Any]]: ...
    def __call__(self, app_class: type[App]) -> Iterator[tuple[_ActionT, Any]]: ...

class Attrs(Callable[Any]):
    query: Query[Any]
    names: Sequence[str]
    def __init__(self, query: Query[Any], names: Sequence[str]) -> None: ...
    def execute(self, configurable: Configurable) -> Iterator[dict[str, Any]]: ...
    def __call__(self, app_class: type[App]) -> Iterator[dict[str, Any]]: ...

class Obj(Callable[Any]):
    query: Query[Any]
    def __init__(self, query: Query[Any]) -> None: ...
    def execute(self, configurable: Configurable) -> Iterator[Any]: ...
