from collections.abc import Callable, Iterator, Sequence
from typing import Any

class Predicate:
    name: str
    index: Callable[[Any], KeyIndex]
    fallback: Callable[..., Any] | None
    get_key: Callable[[dict[str, Any]], Any] | None
    default: Any | None
    def __init__(
        self, name: str, index: Callable[[Any], KeyIndex], get_key: Callable[[dict[str, Any]], Any] | None = ..., fallback: Callable[..., Any] | None = ..., default: Any | None = ...
    ) -> None: ...
    def create_index(self) -> KeyIndex: ...
    def key_by_predicate_name(self, d: dict[str, Any]) -> Any | None: ...

def match_key(name: str, func: Callable[..., Any] | None = ..., fallback: Callable[..., Any] | None = ..., default: Any | None = ...) -> Predicate: ...
def match_instance(name: str, func: Callable[..., Any] | None = ..., fallback: Callable[..., Any] | None = ..., default: Any | None = ...) -> Predicate: ...
def match_class(name: str, func: Callable[..., Any] | None = ..., fallback: Callable[..., Any] | None = ..., default: Any | None = ...) -> Predicate: ...

class KeyIndex(dict[Any, Callable[..., Any]]):
    fallback: Callable[..., Any] | None
    def __init__(self, fallback: Callable[..., Any] | None = ...) -> None: ...
    def __missing__(self, key: Any) -> frozenset[Any]: ...
    def permutations(self, key: Any) -> Iterator[Any]: ...

class ClassIndex(KeyIndex):
    def permutations(self, key: type) -> Iterator[type]: ...

class PredicateRegistry:
    known_keys: set[Any]
    known_values: set[Callable[..., Any]]
    predicates: tuple[Predicate, ...]
    indexes: list[KeyIndex]
    def __init__(self, *predicates: Predicate) -> None: ...
    def register(self, key: Any, value: Callable[..., Any]) -> None: ...
    def get(self, keys: Sequence[Any]) -> set[Callable[..., Any]]: ...
    def permutations(self, keys: Sequence[Any]) -> Iterator[tuple[Any, ...]]: ...
    def key(self, **kw: Any) -> tuple[Any, ...]: ...
    def key_dict_to_predicate_key(self, d: dict[str, Any]) -> tuple[Any, ...]: ...
    def component(self, keys: Sequence[Any]) -> Callable[..., Any] | None: ...
    def fallback(self, keys: Sequence[Any]) -> Callable[..., Any] | None: ...
    def all(self, key: Sequence[Any]) -> Iterator[Callable[..., Any]]: ...
