from _typeshed import SupportsItems
from collections.abc import Iterable, Mapping, Sequence
from typing import Any, Literal, TypedDict, TypeVar, overload
from typing_extensions import Unpack

_T = TypeVar("_T")

class _URLDict(TypedDict):
    host: str
    username: str | None
    password: str | None
    scheme: str
    port: int | None
    path: str
    query: str
    fragment: str

class _MutateArgs(TypedDict, total=False):
    host: str | None
    username: str | None
    password: str | None
    scheme: str | None
    port: int | None
    path: str | None
    query: str | None
    fragment: str | None


def to_unicode(string: object) -> str: ...
def to_utf8(string: object) -> str: ...
def dict_to_unicode(raw_dict: SupportsItems[Any, list[Any]]) -> dict[str, list[str]]: ...
@overload
def unicode_quote(string: None, safe: str = "/") -> None: ...
@overload
def unicode_quote(string: str, safe: str = "/") -> str: ...
@overload
def unicode_quote_path_segment(string: None) -> None: ...
@overload
def unicode_quote_path_segment(string: str) -> str: ...
@overload
def unicode_unquote(string: None) -> None: ...
@overload
def unicode_unquote(string: str) -> str: ...
def unicode_urlencode(query: SupportsItems[str, list[str]], doseq: bool = True) -> str: ...
def parse(url_str: str) -> _URLDict: ...

class URL:
    def __init__(
        self,
        url_str: str | None = None,
        host: str | None = None,
        username: str | None = None,
        password: str | None = None,
        scheme: str | None = None,
        port: int | None = None,
        path: str | None = None,
        query: str | None = None,
        fragment: str | None = None,
    ) -> None: ...
    def __eq__(self, other: URL) -> bool: ...  # type:ignore[override]
    def __ne__(self, other: URL) -> bool: ...  # type:ignore[override]
    def __hash__(self) -> int: ...
    def as_string(self) -> str: ...
    def netloc(self) -> str: ...
    @overload
    def host(self, value: None = None) -> str | None: ...
    @overload
    def host(self, value: str) -> URL: ...
    domain = host
    @overload
    def username(self, value: None = None) -> str | None: ...
    @overload
    def username(self, value: str) -> URL: ...
    @overload
    def password(self, value: None = None) -> str | None: ...
    @overload
    def password(self, value: str) -> URL: ...
    @overload
    def subdomains(self, value: None = None) -> list[str]: ...
    @overload
    def subdomains(self, value: Sequence[str]) -> URL: ...
    @overload
    def subdomain(self, index: int, value: None = None) -> str: ...
    @overload
    def subdomain(self, index: int, value: str) -> URL: ...
    @overload
    def scheme(self, value: None = None) -> str | None: ...
    @overload
    def scheme(self, value: str) -> URL: ...
    @overload
    def path(self, value: None = None) -> str | None: ...
    @overload
    def path(self, value: str) -> URL: ...
    @overload
    def query(self, value: None = None) -> str | None: ...
    @overload
    def query(self, value: str) -> URL: ...
    @overload
    def port(self, value: None = None) -> int | None: ...
    @overload
    def port(self, value: int) -> URL: ...
    @overload
    def fragment(self, value: None = None) -> str | None: ...
    @overload
    def fragment(self, value: str) -> URL: ...
    def relative(self) -> URL: ...
    @overload
    def path_segment(self, index: int, value: None = None, default: None = None) -> str | None: ...
    @overload
    def path_segment(self, index: int, value: None, default: _T) -> str | _T: ...
    @overload
    def path_segment(self, index: int, value: None = None, *, default: _T) -> str | _T: ...
    @overload
    def path_segment(self, index: int, value: str, default: None = None) -> URL: ...
    @overload
    def path_segments(self, value: None = None) -> tuple[str, ...]: ...
    @overload
    def path_segments(self, value: Sequence[str]) -> URL: ...
    def add_path_segment(self, value: str) -> URL: ...
    def has_query_param(self, key: str) -> bool: ...
    def has_query_params(self, keys: Iterable[str]) -> bool: ...
    @overload
    def query_param(self, key: str, value: None = None, default: None = None, as_list: Literal[False] = False) -> str | list[str] | None: ...
    @overload
    def query_param(self, key: str, value: None = None, default: None = None, *, as_list: Literal[True]) -> list[str] | None: ...
    @overload
    def query_param(self, key: str, value: None = None, *, default: _T, as_list: Literal[False] = False) -> str | list[str] | _T: ...
    @overload
    def query_param(self, key: str, value: None = None, *, default: _T, as_list: Literal[True]) -> list[str] | _T: ...
    @overload
    def query_param(self, key: str, value: str | bytes | list[str] | tuple[str, ...], default: None = None, as_list: bool = False) -> URL: ...
    def append_query_param(self, key: str, value: str) -> URL: ...
    @overload
    def query_params(self, value: None = None) -> dict[str, list[str]]: ...
    @overload
    def query_params(self, value: Mapping[str, Sequence[str] | str]) -> URL: ...
    def remove_query_param(self, key: str, value: str | None = None) -> URL: ...
    @classmethod
    def _mutate(cls, url: URL, **kwargs: Unpack[_MutateArgs]) -> URL: ...
    @classmethod
    def from_string(cls, url_str: str) -> URL: ...
