from collections.abc import Callable
from typing import Generic, TypeVar

from weakref import KeyedRef, WeakValueDictionary

_T = TypeVar("_T")

class WeakSet(Generic[_T]):
    data: WeakValueDictionary[int, _T]
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def __contains__(self, obj: object) -> bool: ...
    def add(self, obj: _T) -> None: ...
    def remove(self, obj: _T) -> None: ...
    def clear(self) -> None: ...
    def map(self, f: Callable[[_T], object]) -> None: ...
    def as_weakref_list(self) -> list[KeyedRef[int, _T]]: ...
