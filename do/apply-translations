#!/usr/bin/env python

from __future__ import annotations

import os
import re

import click

base = os.path.join(os.getcwd(), 'src', 'onegov')


def locale_file(module: str, lang: str) -> str:
    return f'{base}/{module}/locale/{lang}/LC_MESSAGES/onegov.{module}.po'


def open_file(path: str, mode: str = 'r') -> str:
    with open(path, mode) as f:
        file = f.read()
    return file


def parse_entry(block: str) -> tuple[str, str]:
    parts = block.split('msgstr ')
    return parts[0].replace('msgid ', ''), parts[1]


def blocks_from_file(src: str, lang: str) -> list[str]:
    return re.split(r'\n\n', open_file(locale_file(src, lang)))


def parse_file(src: str, lang: str) -> dict[str, str]:
    src_dict = {}
    for block in blocks_from_file(src, lang):
        id_, value = parse_entry(block)
        src_dict[id_] = value
    return src_dict


def emtpy_value(value: str) -> bool:
    return value == '""'


def fusion_po(
    src: str,
    target: str,
    lang: str,
    dry_run: bool = False,
    overwrite: bool = False
) -> None:

    src_parsed = parse_file(src, lang)

    new_blocks = []
    for block in blocks_from_file(target, lang):
        msgid, value = parse_entry(block)
        new_val = src_parsed.get(msgid)

        if not new_val or emtpy_value(new_val):
            new_blocks.append(block)
            continue

        if emtpy_value(value) or overwrite:
            new_blocks.append(f'msgid {msgid}msgstr {new_val}')
        else:
            new_blocks.append(block)

    if not dry_run:
        with open(locale_file(target, lang), 'w') as new:
            new.write('\n\n'.join(new_blocks))
    else:
        click.secho('\n\n'.join(new_blocks))


@click.command()
@click.argument('source')
@click.argument('target')
@click.option('--overwrite', is_flag=True, default=False)
@click.option('--dry-run', is_flag=True, default=False)
def apply_translations(
    source: str,
    target: str,
    overwrite: bool,
    dry_run: bool
) -> None:
    """
    Use the source and target names of onegov modules to transfer
    translations that appear in both.

    Example: apply-translations onegov.org onegov.town6

    """

    source = source.replace('onegov.', '')
    target = target.replace('onegov.', '')

    langs = {
        f for f in os.listdir(f'{base}/{source}/locale')
        if not f.endswith('.pot')
    } & {
        f for f in os.listdir(f'{base}/{target}/locale')
        if not f.endswith('.pot')
    }

    for lang in langs:
        fusion_po(source, target, lang, dry_run, overwrite)


if __name__ == '__main__':
    apply_translations()
