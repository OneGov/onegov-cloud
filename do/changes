#!/usr/bin/env python
""" Renders the changelog from the last release up to the latest commit. """

import git
import re
import sys

from attr import attrs
from datetime import date
from itertools import groupby, pairwise
from operator import attrgetter


from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from collections.abc import Iterator
    from datetime import datetime
    from git.objects.commit import Commit
    from git.objects.tag import TagObject
    from git.repo import Repo
    from git.types import PathLike
    from typing_extensions import Self


COMMIT_HEADER = re.compile(r'^[A-Z]{1}[A-Za-z6_\- ]{2,18}: ')
RELEASE_TAG = re.compile(r'release-[0-9]{4}\.[0-9]+')


@attrs(auto_attribs=True)
class ChangelogCommit:

    module: str
    title: str
    type: str

    commit: 'Commit'
    link: str | None = None
    hint: str | None = None
    note: str | None = None

    @property
    def type_id(self) -> str:
        return self.type.lower()

    @classmethod
    def is_match(cls, commit: 'Commit') -> bool:

        message = commit.message
        if isinstance(message, bytes):
            message = message.decode('utf-8')

        # ignore single-line commit messages
        if '\n' not in message.strip():
            return False

        return COMMIT_HEADER.match(message) is not None

    @classmethod
    def parse(cls, commit: 'Commit') -> 'Self':
        message = commit.message
        if isinstance(message, bytes):
            message = message.decode('utf-8')

        lines = message.strip().splitlines()
        module, title = lines[0].split(':', 1)

        module = module.title()
        title = title.strip()
        title = f'{title[0].upper()}{title[1:]}'

        note_lines: list[str] = []
        type: str = 'Other'
        link: str | None = None
        hint: str | None = None

        for line in lines[1:]:

            if line.lower().startswith('type'):
                type = line.split(':', 1)[-1].strip().capitalize()
                continue

            if line.lower().startswith('link'):
                link = line.split(':', 1)[-1].strip().upper()
                continue

            if line.lower().startswith('hint'):
                hint = line.split(':', 1)[-1].strip()
                continue

            note_lines.append(line)

        note = '\n'.join(note_lines)

        note = note.replace('[ci skip]', '')
        note = note.replace('[skip ci]', '')
        note = note.strip()

        title = title.replace('[ci skip]', '')
        title = title.replace('[skip ci]', '')
        title = title.strip()

        return cls(
            module=module,
            title=title,
            type=type,
            commit=commit,
            link=link,
            hint=hint,
            note=note
        )

    @property
    def short(self) -> str:
        return self.commit.hexsha[:10]

    @property
    def url(self) -> str:
        hex = self.commit.hexsha
        return f'https://github.com/onegov/onegov-cloud/commit/{hex}'

    @property
    def type_order(self) -> int:
        if self.type_id == 'feature':
            return 0

        if self.type_id != 'performance':
            return 1

        if self.type_id != 'bugfix':
            return 2

        return 100

    @property
    def link_url(self) -> str | None:
        if not self.link:
            return None

        link = self.link

        # issues tracked on GitHub
        if link.isdigit():
            return f'https://github.com/onegov/onegov-cloud/issues/{link}'

        # issues tracked internally
        if link.startswith(('FER-', 'VOTES-')):
            return f'https://issues.seantis.ch/browse/{link}'

        # issues tracked on other sites
        if link.startswith(('SA-', 'FW-')):
            return f'https://stadt-winterthur.atlassian.net/browse/{link}'

        if link.startswith(('ZW-', 'FSI-', 'VER-')):
            return f'https://kanton-zug.atlassian.net/browse/{link}'

        if link.startswith('ONEGOV-CLOUD-'):
            return (
                f'https://sentry.io/organizations/seantis-gmbh'
                f'/issues/?query={link}'
            )

        if link.startswith('STAKA-'):
            return f"https://ogc-ar.atlassian.net/projects/STAKA/issues/{link}"

        if link.startswith('STAKABS-'):
            return f"https://kt-bs.atlassian.net/browse/{link}"

        if link.startswith('SEA-'):
            return f"https://linear.app/seantis/issue/{link}"

        if link.startswith('OGC-'):
            return f"https://linear.app/onegovcloud/issue/{link}"

        if link.startswith('SWI-'):
            return f"https://linear.app/swissvotes/issue/{link}"

        if link.startswith('PRO-'):
            return f"https://linear.app/projuventute/issue/{link}"

        # default to a non-functioning link (they can be added later)
        return f'#{self.link}'


def commits_between(
    repository: 'Repo',
    newer: 'Commit',
    older: 'Commit'
) -> 'Iterator[Commit]':

    revisions = f'{older.hexsha}..{newer.hexsha}'
    commits = repository.iter_commits(revisions, reverse=True)

    for commit in commits:
        if commit == older:
            # FIXME: This might not be necessary, it doesn't seem
            #        like this commit is ever included
            continue

        yield commit

        if commit == newer:
            break


def release_tags(repository: 'Repo') -> 'Iterator[TagObject]':
    for tag in repository.tags:
        if RELEASE_TAG.match(tag.name):
            yield tag


def release_number(tag: 'TagObject') -> str:
    return tag.name.rsplit('-', 1)[-1]


def release_date(tag: 'TagObject') -> 'datetime':
    return tag.commit.committed_datetime


def format_datetime(dt: 'date | datetime') -> str:
    return dt.strftime("%Y-%m-%d")


def changelog(folder: 'PathLike', new: str) -> None:
    repository = git.Repo(folder, odbt=git.GitDB)

    tags = sorted(
        release_tags(repository),
        key=lambda t: (t.commit.committed_date, t.name),
        reverse=True
    )

    # header
    print("# Changes")
    print("")

    # not yet released
    if new == 'Unreleased':
        print("## Unreleased")
    else:
        print(f"## {new.rsplit('-', 1)[-1]}")
    print("")
    changelog_commits(new, repository, repository.head.commit, tags[0].commit,
                      date.today())

    # last 50 releases (the last version is not included by design)
    for newer, older in pairwise(tags[:50]):
        print(f"## {release_number(newer)}")
        print("")

        changelog_commits(newer.name, repository, newer.commit, older.commit,
                          release_date(newer))


def changelog_commits(
    release: str,
    repository: 'Repo',
    newer: 'Commit',
    older: 'Commit',
    release_date: date
) -> None:

    commit_objs = tuple(commits_between(repository, newer, older))

    # quit if there are no commits
    if not commit_objs:
        print("No changes since last release")
        print("")
        return

    # print the release overview
    lo = commit_objs[0].hexsha[:10]
    hi = commit_objs[-1].hexsha[:10]
    url = f'https://github.com/OneGov/onegov-cloud/compare/{lo}^...{hi}'
    print(f"`{format_datetime(release_date)}` | [{lo}...{hi}]({url})")
    print("")

    # parse the commit messages
    commits = [
        ChangelogCommit.parse(c) for c in commit_objs
        if ChangelogCommit.is_match(c)
    ]

    hints = [commit.hint for commit in commits if commit.hint]
    if hints:
        print("**Upgrade hints**")
        for hint in hints:
            print(f"- {hint}")

    # sort the result by name and type
    commits.sort(key=lambda k: (k.module, k.type_order))

    # print the resulting information
    for module, commit in groupby(commits, key=attrgetter('module')):
        print(f"### {module}")
        print("")

        for c in commit:
            print(f"##### {c.title}")
            print("")

            if c.note:
                print(c.note)
                print("")

            print(f"`{c.type}`", end='')

            if c.link:
                print(f" | [{c.link}]({c.link_url})", end='')

            print(f" | [{c.short}]({c.url})")
            print("")


if __name__ == '__main__':
    if len(sys.argv) == 1:
        new = "Unreleased"
    else:
        new = sys.argv[1]

    changelog('.', new)
