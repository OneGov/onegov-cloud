[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
log_level = "INFO"
testpaths = ["tests"]
timeout = 300

[tool.coverage.run]
data_file = "/tmp/.coverage"
include = ["*/onegov/*"]
omit = ["*/tests/*", "**/upgrade.py"]

[tool.coverage.report]
ignore_errors = true
exclude_lines = [
    "pragma: no cover",
    "pragma: unreachable",
    "assert_never[(]",
    "@overload",
    "raise NotImplementedError",
    "raise AssertionError[(].unreachable.[)]",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__."
]

[tool.mypy]
python_version = "3.10"
follow_imports = "silent"
namespace_packages = true
explicit_package_bases = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
strict_equality = true
extra_checks = true
plugins = "sqlmypy"
mypy_path = "$MYPY_CONFIG_FILE_DIR/src:$MYPY_CONFIG_FILE_DIR/stubs"

[[tool.mypy.overrides]]
# more lax rules for untyped modules
module = ["onegov.feriennet.*"]
warn_unreachable = false
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_untyped_defs = false
strict_equality = false
extra_checks = false

[[tool.mypy.overrides]]
# ignore missing imports for packages that have no stubs available
module = [
    "bjoern.*",
    "cssutils.*",
    "elasticsearch_dsl.*",
    "docxtpl.*",
    "dill.*",
    "dukpy.*",
    "genshi.*",
    "icalendar.*",
    # FIXME: Do we really need this? We have this implemented ourselves
    #        in OCQMS, so we could just copy that code over... plus the
    #        standard lib technically supports some ISO-8601 formats as well
    "isodate.*",
    "kerberos.*",
    # TODO: Consider switching to fasttext-langdetect
    #       langdetect is really, really slow by comparison...
    "langdetect.*",
    "lazy_object_proxy.*",
    "mistletoe.*",
    "msal.*",
    "pdfdocument.*",
    # FIXME: We only use this to convert a PDF to an XObject and then
    #        embed it as a reportlab Flowable. I think we could implement
    #        this using just pypdf, having multiple PDF parsers just for
    #        this one use-case seems bad
    "pdfrw.*",
    "pdftotext.*",
    "pglast.*",
    "purl.*",
    # FIXME: We only use this for a single util function, try to implement
    #        the same functionality with just lxml or BeautifulSoup
    "pyquery.*",
    "reportlab.*",
    "svglib.*",
    "stdnum.*",
    "ua_parser.*",
    "urlextract.*",
    "webassets.*",
    "webtest.*",
    "xlrd.*",
    "xlsxwriter.*",
    "yubico_client.*",
    "zope.*"
]
ignore_missing_imports = true


[tool.bandit]
exclude_dirs = [
    "tests",
    "*/**/upgrade.py",
    "*/**/upgrades.py"
]
skips = [
    # ignore asserts
    "B101",
    # ignore pickle (SEA-1030)
    "B301",
    "B403",
    # ignore XML (SEA-1031)
    "B314",
    "B320",
    "B405",
    "B410",
    # ignore subprocesses (SEA-1032)
    "B404",
    "B602",
    "B603",
    "B605",
    "B607",
    # ignore temp directory (SEA-1033)
    "B108"
]
