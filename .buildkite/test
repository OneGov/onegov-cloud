#!/usr/bin/env bash
set -euo pipefail

# automatically open the log output group if there's an error
trap 'echo "^^^ +++"' ERR

# install test requirements
# shellcheck disable=SC2086
echo "--- Installing requirements :redis: :postgres: :java: :chrome:"
rm /etc/apt/preferences
install-packages \
    wget \
    apparmor \
    curl \
    git-core \
    postgresql \
    redis \
    openjdk-8-jre-headless \
    gcc \
    libc-dev \
    fonts-liberation \
    libappindicator3-1 \
    libasound2 \
    libdrm2 \
    libgbm1 \
    libnspr4 \
    libnss3 \
    libu2f-udev \
    libvulkan1 \
    libx11-xcb1 \
    libxcb-dri3-0 \
    libxshmfence1 \
    libxss1 \
    xdg-utils

wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
dpkg -i google-chrome-stable_current_amd64.deb

# configure JAVA_HOME
export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"

# Redis needs to be running
redis-server --daemonize yes

# this needs to be set on Google Cloud for unknown reasons
echo '127.0.0.1 localhost' >> /etc/hosts

echo "$(redis-server --version)"
echo "$(psql --version)"
echo "$(java --version)"

echo "--- Creating virtual environment"

# switch to virtual environment
# shellcheck disable=SC1091
source /app/bin/activate

# install testing dependencies
echo "--- Installing dependencies :python:"
echo "$(python --version)"

# only switch to container src directory if we want to test
# the container, rather than just the source tree
if [["$CONTAINER_TEST_ARG" -eq "container"]]; then
    cd /app/src
fi

pip install '.[test]' \
    pytest-test-groups \
    pytest-cov \
    pytest-codecov \
    --quiet

# reset the build assets again (like in the upstream container script),
# because pip install will undo that change
find /app/lib -type d -iname assets -print0 | xargs -0 chmod a+w

# run the tests as a separate user
export LC_ALL="C.UTF-8"
export LANG="C.UTF-8"

adduser --disabled-password --gecos "" test

GROUP_COUNT="$BUILDKITE_PARALLEL_JOB_COUNT"
GROUP="$(( BUILDKITE_PARALLEL_JOB + 1 ))"

echo "--- Running tests :pytest: (group: $GROUP/$GROUP_COUNT)"
set +x

export CODECOV_TOKEN="$CODECOV_ONEGOV_TOKEN"

run-as "$(id -u test)":test py.test \
    -o cache_dir=/tmp/pytest \
    --test-group "$GROUP" \
    --test-group-count "$GROUP_COUNT" \
    --cov \
    --cov-config=pyproject.toml \
    --codecov \
    --codecov-branch="$BUILDKITE_BRANCH" \
    --codecov-commit="$BUILDKITE_COMMIT" \
    --codecov-slug=OneGov/onegov-cloud \
    tests
